
STEPPER_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000023e  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000134  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001fc  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a5  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d0  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 00 	call	0xec	; 0xec <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <rotate_anticlockwise>:
#include <atmega/button.h>
#define origin 0x01;
char rotate_anticlockwise(int defnum)
{
  6c:	ac 01       	movw	r20, r24
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  6e:	99 23       	and	r25, r25
  70:	d4 f0       	brlt	.+52     	; 0xa6 <rotate_anticlockwise+0x3a>
	{
		var=0x01<<i;
  72:	81 e0       	ldi	r24, 0x01	; 1
#define origin 0x01;
char rotate_anticlockwise(int defnum)
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
	{
		var=0x01<<i;
  78:	91 e0       	ldi	r25, 0x01	; 1
		if(i>3)
		{
			i=-1;
  7a:	7f ef       	ldi	r23, 0xFF	; 255
  7c:	6f ef       	ldi	r22, 0xFF	; 255
  7e:	0d c0       	rjmp	.+26     	; 0x9a <rotate_anticlockwise+0x2e>
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
	{
		var=0x01<<i;
  80:	89 2f       	mov	r24, r25
  82:	02 2e       	mov	r0, r18
  84:	01 c0       	rjmp	.+2      	; 0x88 <rotate_anticlockwise+0x1c>
  86:	88 0f       	add	r24, r24
  88:	0a 94       	dec	r0
  8a:	ea f7       	brpl	.-6      	; 0x86 <rotate_anticlockwise+0x1a>
		if(i>3)
  8c:	24 30       	cpi	r18, 0x04	; 4
  8e:	31 05       	cpc	r19, r1
  90:	24 f0       	brlt	.+8      	; 0x9a <rotate_anticlockwise+0x2e>
		{
			i=-1;
			defnum-=4;
  92:	44 50       	subi	r20, 0x04	; 4
  94:	51 09       	sbc	r21, r1
	for (int i=0;i<=defnum;i++)
	{
		var=0x01<<i;
		if(i>3)
		{
			i=-1;
  96:	27 2f       	mov	r18, r23
  98:	36 2f       	mov	r19, r22
#define origin 0x01;
char rotate_anticlockwise(int defnum)
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	42 17       	cp	r20, r18
  a0:	53 07       	cpc	r21, r19
  a2:	74 f7       	brge	.-36     	; 0x80 <rotate_anticlockwise+0x14>
  a4:	08 95       	ret
#include <atmega/button.h>
#define origin 0x01;
char rotate_anticlockwise(int defnum)
{
	char var;
	var=origin;
  a6:	81 e0       	ldi	r24, 0x01	; 1
			defnum-=4;
			
		}
	}
	return var;
}
  a8:	08 95       	ret

000000aa <rotate_clockwise>:

char rotate_clockwise(int defnum)
{
  aa:	ac 01       	movw	r20, r24
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  ac:	99 23       	and	r25, r25
  ae:	e4 f0       	brlt	.+56     	; 0xe8 <rotate_clockwise+0x3e>
	{
		var=0x08>>i;
  b0:	88 e0       	ldi	r24, 0x08	; 8

char rotate_clockwise(int defnum)
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
	{
		var=0x08>>i;
  b6:	68 e0       	ldi	r22, 0x08	; 8
  b8:	70 e0       	ldi	r23, 0x00	; 0
		if(i>3)
		{
			i=-1;
  ba:	ff ef       	ldi	r31, 0xFF	; 255
  bc:	ef ef       	ldi	r30, 0xFF	; 255
  be:	0e c0       	rjmp	.+28     	; 0xdc <rotate_clockwise+0x32>
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
	{
		var=0x08>>i;
  c0:	cb 01       	movw	r24, r22
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <rotate_clockwise+0x20>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <rotate_clockwise+0x1c>
		if(i>3)
  ce:	24 30       	cpi	r18, 0x04	; 4
  d0:	31 05       	cpc	r19, r1
  d2:	24 f0       	brlt	.+8      	; 0xdc <rotate_clockwise+0x32>
		{
			i=-1;
			defnum-=4;
  d4:	44 50       	subi	r20, 0x04	; 4
  d6:	51 09       	sbc	r21, r1
	for (int i=0;i<=defnum;i++)
	{
		var=0x08>>i;
		if(i>3)
		{
			i=-1;
  d8:	2f 2f       	mov	r18, r31
  da:	3e 2f       	mov	r19, r30

char rotate_clockwise(int defnum)
{
	char var;
	var=origin;
	for (int i=0;i<=defnum;i++)
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	42 17       	cp	r20, r18
  e2:	53 07       	cpc	r21, r19
  e4:	6c f7       	brge	.-38     	; 0xc0 <rotate_clockwise+0x16>
  e6:	08 95       	ret
}

char rotate_clockwise(int defnum)
{
	char var;
	var=origin;
  e8:	81 e0       	ldi	r24, 0x01	; 1
			defnum-=4;
			
		}
	}
	return var;
}
  ea:	08 95       	ret

000000ec <main>:
#include <atmega/button.h>
#include <atmega/STEPPER_MOTOR.h>

int main(void)
{
	DDRA=0x00;
  ec:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8b bb       	out	0x1b, r24	; 27
	DDRD=0xff;
  f2:	81 bb       	out	0x11, r24	; 17
	PORTD=origin;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	82 bb       	out	0x12, r24	; 18
	
	int i=0,j=0;
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {	
		if(bta1)
 100:	c8 99       	sbic	0x19, 0	; 25
 102:	0f c0       	rjmp	.+30     	; 0x122 <main+0x36>
			{
				
				PORTD=rotate_clockwise(i);
 104:	ce 01       	movw	r24, r28
 106:	0e 94 55 00 	call	0xaa	; 0xaa <rotate_clockwise>
 10a:	82 bb       	out	0x12, r24	; 18
				i++;
 10c:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f e3       	ldi	r18, 0x3F	; 63
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x28>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x32>
 11e:	00 00       	nop
 120:	ef cf       	rjmp	.-34     	; 0x100 <main+0x14>
				_delay_ms(1000);
				
			}
		else if(bta2)
 122:	c9 99       	sbic	0x19, 1	; 25
 124:	ed cf       	rjmp	.-38     	; 0x100 <main+0x14>
		{
			j++;
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD=rotate_anticlockwise(j);
 12a:	c8 01       	movw	r24, r16
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <rotate_anticlockwise>
 130:	82 bb       	out	0x12, r24	; 18
 132:	2f e3       	ldi	r18, 0x3F	; 63
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x4c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x56>
 142:	00 00       	nop
 144:	dd cf       	rjmp	.-70     	; 0x100 <main+0x14>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
